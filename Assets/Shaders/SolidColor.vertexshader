#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 


// output to Fragment Shader
out vec4 v_color;

out vec3 normal;          // Transformed normal in View Space
//light 1
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space

out vec4 lightVector[25];



// Uniform
// Values that stay constant for the whole mesh.
// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;

uniform int lightSize;
// light position
uniform vec4 lPosition[25];


void main()
{
	//WBOffsetMatrix = mat4(1.0);
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ViewProjectionTransform *  WorldTransform * vec4(vertexPosition_modelspace,1);
	mat4 MV = ViewTransform *  WorldTransform;
	//normal = vertexNormal_modelspace; // Does this need to be transformed when we pass it to the fragment shader?
	
	v_color = vec4(vertexColor,1);

	vec3 vertexPosition_viewspace = vec3(MV * vec4(vertexPosition_modelspace,1.0f));
	vec3 vertexPosition_worldspace = vec3( WorldTransform * vec4(vertexPosition_modelspace,1.0f));

	// Prepare Data for Fragment Shader
	// Should the normal be transformed?
	normal = (ViewTransform *  WorldTransform * vec4(vertexNormal_modelspace,0)).xyz;
	
	// eyeVector = ...
	eyeVector = vec3(0)-vertexPosition_viewspace;

	for (int i=0; i<lightSize; i++)
		if(lPosition[i].w == 1)
			lightVector[i] = vec4(vec3(ViewTransform * vec4(vec3(lPosition[i]) - vertexPosition_worldspace, 0.0f)),1);
		else
			lightVector[i] = vec4(vec3(ViewTransform * (lPosition[i])),0);
	


}

