#version 330 core
// 
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec2 vertexUV;

// layout(location = 2) in vec4 vertexColor;

// Uniform Inputs
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;

// Outputs to fragment shader
//out vec3 normal;  // You will need this when you do per-fragment lighting
//out vec4 v_color;


uniform int lightSize;
// light position
out vec4 lightVector[8];
uniform vec4 lPosition[8];

out vec2 UV;

uniform mat4 HeadMatrix;

void main()
{

	gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace, 1.0f);

	UV = vertexUV;


	mat4 MV = ViewTransform * WorldTransform;
	vec3 vertexPosition_viewspace = vec3(MV * vec4(vertexPosition_modelspace,1.0f));
	vec3 vertexPosition_worldspace = vec3(WorldTransform * vec4(vertexPosition_modelspace,1.0f));



	for (int i=0; i<lightSize; i++)
	if(lPosition[i].w == 1)
		lightVector[i] = vec4(vec3(ViewTransform * vec4(vec3(lPosition[i]) - vertexPosition_worldspace, 0.0f)),1);
	else
		lightVector[i] = vec4(vec3(ViewTransform * (lPosition[i])),0);
}
