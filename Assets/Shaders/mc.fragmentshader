#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
//in vec4 v_color;
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform int lightSize;

uniform vec3 lColor[8];


uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ
// Ouput data
out vec4 color;

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector[8];

// Values that stay constant for the whole mesh.
uniform sampler2D mySampleTexture;

void main()
{
    vec4 textureColor = texture( mySampleTexture, UV );

    // modulate texture color with vertex color
    //color = v_color * textureColor * vec4(iTotal,1);
	//color = textureColor;
	vec3 iTotal = vec3(0.0f);
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
	// iAmient
	vec3 iAmbient = vec3(materialCoefficients.x);
	vec3 iDiffuse = vec3(0.0f);
	vec3 iSpecular = vec3(0.0f);
	vec3 R;

	float d;
	float f_att;
	iTotal += iAmbient/5;

	for (int i=0; i<lightSize; i++){
		d = length(vec3(lightVector[i]));
	
		if(lightVector[i].w > 0)
			f_att = 20.0/(lightAttenuation.x + lightAttenuation.y * d + lightAttenuation.z * d * d);
		else
			f_att = 1;

		// diffuse light
		iDiffuse = lColor[i] * max(0, dot(normalize(vec3(lightVector[i])), normalize(normal))) * materialCoefficients.y;
	
		// specular light phong
		//R = reflect(-normalize(vec3(lightVector[i])), normalize(normal));
		//iSpecular = materialCoefficients.z * lColor[i] * pow(max(0.0, dot(R,normalize(eyeVector))), materialCoefficients.w);
		// phong-blinn  from textbook
		vec3 halfDir = normalize(vec3(lightVector[i])+normal);
		float angle = clamp(dot(halfDir,normal), 0 , 1);
		iSpecular = materialCoefficients.z * lColor[i] *pow(angle, materialCoefficients.w);

		iTotal += f_att * (iDiffuse + iSpecular);
	}
	color = textureColor*vec4(iTotal,1);
    // Alpha test - Discard Fragment below treshold
    if(color.a <= 0.02f)
        discard;
}
