#version 330 core

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform int lightSize;

uniform vec3 lColor;


uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

// Inputs
in vec4 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;	// Vector from the vertex to the Light in View Space
						// Length of lightVector is the distance between light and vertex
						// if w = 1: Point light, if w = 0: directional light



// Ouput data
out vec3 color;



void main()
{
/*
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
	color = v_color;
*/


	vec3 iTotal = vec3(0.0f);
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
	// iAmient
	vec3 iAmbient = vec3(materialCoefficients.x);
	vec3 iDiffuse = vec3(0.0f);
	vec3 iSpecular = vec3(0.0f);
	vec3 R;

	float d;
	float f_att;

	iTotal += iAmbient;

	d = length(vec3(lightVector));
	
	f_att = 10.0/(lightAttenuation.x + lightAttenuation.y * d + lightAttenuation.z * d * d);
		

	float cFactor = dot(normalize(lightVector.xyz), normalize(eyeVector))/(2.0f) + 0.6f;


	//vec3 iTotal = iAmbient + f_att * (iDiffuse + iSpecular);

	//vec3 iTotal = iAmbient;
	//vec3 iTotal = f_att * iDiffuse;
	//vec3 iTotal = f_att * iSpecular;
	
	color = f_att * cFactor * vec3(v_color);
	//color = cFactor * vec3(v_color);
	//color = f_att * vec3(v_color);
	//color = vec3(1.0f);
	//color = v_color;

}
